// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Record
	Key
	RangeWithLimit
	Range
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Record struct {
	DB        string `protobuf:"bytes,1,opt,name=DB" json:"DB,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Version   string `protobuf:"bytes,4,opt,name=Version" json:"Version,omitempty"`
	Proxied   bool   `protobuf:"varint,5,opt,name=Proxied" json:"Proxied,omitempty"`
	ProxiedTo string `protobuf:"bytes,6,opt,name=ProxiedTo" json:"ProxiedTo,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Record) GetDB() string {
	if m != nil {
		return m.DB
	}
	return ""
}

func (m *Record) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Record) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Record) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Record) GetProxied() bool {
	if m != nil {
		return m.Proxied
	}
	return false
}

func (m *Record) GetProxiedTo() string {
	if m != nil {
		return m.ProxiedTo
	}
	return ""
}

type Key struct {
	DB             string `protobuf:"bytes,1,opt,name=DB" json:"DB,omitempty"`
	Key            []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	ProxiedVersion string `protobuf:"bytes,3,opt,name=ProxiedVersion" json:"ProxiedVersion,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Key) GetDB() string {
	if m != nil {
		return m.DB
	}
	return ""
}

func (m *Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Key) GetProxiedVersion() string {
	if m != nil {
		return m.ProxiedVersion
	}
	return ""
}

type RangeWithLimit struct {
	DB             string `protobuf:"bytes,1,opt,name=DB" json:"DB,omitempty"`
	StartKey       []byte `protobuf:"bytes,2,opt,name=StartKey,proto3" json:"StartKey,omitempty"`
	Records        int64  `protobuf:"varint,3,opt,name=Records" json:"Records,omitempty"`
	ProxiedVersion string `protobuf:"bytes,4,opt,name=ProxiedVersion" json:"ProxiedVersion,omitempty"`
	TimeOutInSec   int64  `protobuf:"varint,5,opt,name=TimeOutInSec" json:"TimeOutInSec,omitempty"`
}

func (m *RangeWithLimit) Reset()                    { *m = RangeWithLimit{} }
func (m *RangeWithLimit) String() string            { return proto.CompactTextString(m) }
func (*RangeWithLimit) ProtoMessage()               {}
func (*RangeWithLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RangeWithLimit) GetDB() string {
	if m != nil {
		return m.DB
	}
	return ""
}

func (m *RangeWithLimit) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *RangeWithLimit) GetRecords() int64 {
	if m != nil {
		return m.Records
	}
	return 0
}

func (m *RangeWithLimit) GetProxiedVersion() string {
	if m != nil {
		return m.ProxiedVersion
	}
	return ""
}

func (m *RangeWithLimit) GetTimeOutInSec() int64 {
	if m != nil {
		return m.TimeOutInSec
	}
	return 0
}

type Range struct {
	DB             string `protobuf:"bytes,1,opt,name=DB" json:"DB,omitempty"`
	StartKey       []byte `protobuf:"bytes,2,opt,name=StartKey,proto3" json:"StartKey,omitempty"`
	EndKey         []byte `protobuf:"bytes,3,opt,name=EndKey,proto3" json:"EndKey,omitempty"`
	ProxiedVersion string `protobuf:"bytes,4,opt,name=ProxiedVersion" json:"ProxiedVersion,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Range) GetDB() string {
	if m != nil {
		return m.DB
	}
	return ""
}

func (m *Range) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *Range) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *Range) GetProxiedVersion() string {
	if m != nil {
		return m.ProxiedVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*Record)(nil), "rpc.Record")
	proto.RegisterType((*Key)(nil), "rpc.Key")
	proto.RegisterType((*RangeWithLimit)(nil), "rpc.RangeWithLimit")
	proto.RegisterType((*Range)(nil), "rpc.Range")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SequinsRpc service

type SequinsRpcClient interface {
	GetKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Record, error)
	GetRange(ctx context.Context, in *Range, opts ...grpc.CallOption) (SequinsRpc_GetRangeClient, error)
	GetRangeWithLimit(ctx context.Context, in *RangeWithLimit, opts ...grpc.CallOption) (SequinsRpc_GetRangeWithLimitClient, error)
}

type sequinsRpcClient struct {
	cc *grpc.ClientConn
}

func NewSequinsRpcClient(cc *grpc.ClientConn) SequinsRpcClient {
	return &sequinsRpcClient{cc}
}

func (c *sequinsRpcClient) GetKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := grpc.Invoke(ctx, "/rpc.SequinsRpc/GetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequinsRpcClient) GetRange(ctx context.Context, in *Range, opts ...grpc.CallOption) (SequinsRpc_GetRangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SequinsRpc_serviceDesc.Streams[0], c.cc, "/rpc.SequinsRpc/GetRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequinsRpcGetRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequinsRpc_GetRangeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type sequinsRpcGetRangeClient struct {
	grpc.ClientStream
}

func (x *sequinsRpcGetRangeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sequinsRpcClient) GetRangeWithLimit(ctx context.Context, in *RangeWithLimit, opts ...grpc.CallOption) (SequinsRpc_GetRangeWithLimitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SequinsRpc_serviceDesc.Streams[1], c.cc, "/rpc.SequinsRpc/GetRangeWithLimit", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequinsRpcGetRangeWithLimitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequinsRpc_GetRangeWithLimitClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type sequinsRpcGetRangeWithLimitClient struct {
	grpc.ClientStream
}

func (x *sequinsRpcGetRangeWithLimitClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SequinsRpc service

type SequinsRpcServer interface {
	GetKey(context.Context, *Key) (*Record, error)
	GetRange(*Range, SequinsRpc_GetRangeServer) error
	GetRangeWithLimit(*RangeWithLimit, SequinsRpc_GetRangeWithLimitServer) error
}

func RegisterSequinsRpcServer(s *grpc.Server, srv SequinsRpcServer) {
	s.RegisterService(&_SequinsRpc_serviceDesc, srv)
}

func _SequinsRpc_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequinsRpcServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SequinsRpc/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequinsRpcServer).GetKey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequinsRpc_GetRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequinsRpcServer).GetRange(m, &sequinsRpcGetRangeServer{stream})
}

type SequinsRpc_GetRangeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type sequinsRpcGetRangeServer struct {
	grpc.ServerStream
}

func (x *sequinsRpcGetRangeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _SequinsRpc_GetRangeWithLimit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeWithLimit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequinsRpcServer).GetRangeWithLimit(m, &sequinsRpcGetRangeWithLimitServer{stream})
}

type SequinsRpc_GetRangeWithLimitServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type sequinsRpcGetRangeWithLimitServer struct {
	grpc.ServerStream
}

func (x *sequinsRpcGetRangeWithLimitServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

var _SequinsRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SequinsRpc",
	HandlerType: (*SequinsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _SequinsRpc_GetKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRange",
			Handler:       _SequinsRpc_GetRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRangeWithLimit",
			Handler:       _SequinsRpc_GetRangeWithLimit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x75, 0x29, 0xd4, 0x32, 0x12, 0xa2, 0xab, 0x31, 0x0d, 0xf1, 0x80, 0x35, 0x51, 0x4e, 0x8d,
	0xd1, 0x93, 0xd7, 0x06, 0x43, 0x0c, 0x26, 0x90, 0x85, 0xe0, 0xb9, 0x96, 0x09, 0x6e, 0x22, 0xdd,
	0xba, 0x5d, 0x12, 0xf9, 0x0d, 0xfd, 0x03, 0xbf, 0xd4, 0xec, 0x2e, 0xa5, 0x11, 0x38, 0xe0, 0x6d,
	0xde, 0x9b, 0x79, 0xb3, 0x6f, 0x66, 0x07, 0xea, 0x32, 0x4b, 0xc2, 0x4c, 0x0a, 0x25, 0xa8, 0x23,
	0xb3, 0x24, 0xf8, 0x22, 0xe0, 0x32, 0x4c, 0x84, 0x9c, 0xd2, 0x26, 0x54, 0xba, 0x91, 0x4f, 0xda,
	0xa4, 0x53, 0x67, 0x95, 0x6e, 0x44, 0x8f, 0xc1, 0xe9, 0xe3, 0xd2, 0xaf, 0xb4, 0x49, 0xa7, 0xc1,
	0x74, 0x48, 0xcf, 0xa0, 0x36, 0x89, 0xdf, 0x17, 0xe8, 0x3b, 0x86, 0xb3, 0x80, 0xfa, 0x70, 0x38,
	0x41, 0x99, 0x73, 0x91, 0xfa, 0x55, 0x23, 0x2e, 0xa0, 0xce, 0x0c, 0xa5, 0xf8, 0xe4, 0x38, 0xf5,
	0x6b, 0x6d, 0xd2, 0xf1, 0x58, 0x01, 0xe9, 0x05, 0xd4, 0x57, 0xe1, 0x58, 0xf8, 0xae, 0x51, 0x95,
	0x44, 0x30, 0x30, 0x2f, 0xef, 0x61, 0xe8, 0x1a, 0x9a, 0x2b, 0x55, 0xe1, 0xc0, 0x31, 0xd5, 0x1b,
	0x6c, 0xf0, 0x43, 0xa0, 0xc9, 0xe2, 0x74, 0x86, 0x2f, 0x5c, 0xbd, 0x3d, 0xf3, 0x39, 0x57, 0x5b,
	0xcd, 0x5b, 0xe0, 0x8d, 0x54, 0x2c, 0x55, 0xf9, 0xc2, 0x1a, 0xeb, 0x39, 0xec, 0x8e, 0x72, 0xd3,
	0xdf, 0x61, 0x05, 0xdc, 0x61, 0xa0, 0xba, 0xcb, 0x00, 0x0d, 0xa0, 0x31, 0xe6, 0x73, 0x1c, 0x2c,
	0xd4, 0x53, 0x3a, 0xc2, 0xc4, 0xac, 0xc3, 0x61, 0x7f, 0xb8, 0x20, 0x87, 0x9a, 0xf1, 0xf8, 0x2f,
	0x6b, 0xe7, 0xe0, 0x3e, 0xa6, 0x53, 0x9d, 0xb1, 0x7f, 0xb2, 0x42, 0xfb, 0x1a, 0xbb, 0xfb, 0x26,
	0x00, 0x23, 0xfc, 0x58, 0xf0, 0x34, 0x67, 0x59, 0x42, 0x2f, 0xc1, 0xed, 0xa1, 0x69, 0xec, 0x85,
	0xfa, 0x52, 0xfa, 0xb8, 0x6c, 0x1d, 0x99, 0xc8, 0x4e, 0x1c, 0x1c, 0xd0, 0x1b, 0xf0, 0x7a, 0xa8,
	0xac, 0x53, 0xb0, 0x29, 0x1d, 0x6f, 0x94, 0xdd, 0x12, 0xfa, 0x00, 0x27, 0x45, 0x61, 0xb9, 0xf6,
	0xd3, 0x52, 0xb1, 0x26, 0xb7, 0xa4, 0xd1, 0x15, 0xb4, 0x12, 0x31, 0x0f, 0x73, 0x25, 0x79, 0x86,
	0x61, 0xae, 0x84, 0x8c, 0x67, 0x18, 0xe6, 0xd6, 0x67, 0xa4, 0x0f, 0x77, 0x48, 0x5e, 0x5d, 0x73,
	0xc6, 0xf7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34, 0x1a, 0xc5, 0x76, 0xd3, 0x02, 0x00, 0x00,
}
